-- Task 3. Aggregate functions, Having, Order By, GroupBy and Joins:
-- 1. Write an SQL query to retrieve a list of all orders along with customer information (e.g., customer name) for each order.
use techshop;
select concat(c.firstname,c.lastname) as name,o.orderid,o.customerid,o.orderdate,o.totalamount,o.status from customers c 
join orders o on c.customerid=o.customerid;

-- 2. Write an SQL query to find the total revenue generated by each electronic gadget product.
-- Include the product name and the total revenue.
select p.productname,p.productid,sum(od.quantity*p.price) as total_revenue from products p
join orderdetails od on p.productid=od.productid 
group by p.productname,p.productid;
 

-- 3. Write an SQL query to list all customers who have made at least one purchase.
-- Include their names and contact information.
select concat(c.firstname,c.lastname) as name,o.orderid,o.customerid,o.orderdate,o.totalamount,o.status from customers c 
right join orders o on c.customerid=o.customerid;

-- 4. Write an SQL query to find the most popular electronic gadget, which is the one with the highest total quantity ordered.
-- Include the product name and the total quantity ordered.
select p.productname,od.quantity from products p
join orderdetails od on p.productid=od.productid 
order by od.quantity desc limit 1;

-- 5. Write an SQL query to retrieve a list of electronic gadgets along with their corresponding categories.
alter table products add column Catogories varchar(50) not null;
select * from products;
update products set Catogories = 'Wireless' where ProductId in(100,101);
select * from products;
update products set Catogories = 'SmartDevices' where ProductId in(102,110);
update products set Catogories = 'DisplayDevices' where ProductId in(104,105);
update products set Catogories = 'Chargers' where ProductId in(103,109);
update products set Catogories = 'ElectronicAccessories' where ProductId in(108,107,106);
select productName, Catogories from products;

-- 6. Write an SQL query to calculate the average order value for each customer.
-- Include the customer's name and their average order value.
insert into orders(OrderId, CustomerId, orderDate, TotalAmount, status) 
values
(1014, 10, '2025-01-30', null, 'Shipped'),
(1013, 10, '2025-06-30', null, 'Shipped');
select * from orders;
set sql_safe_updates =0;
update orders o join orderdetails od on o.orderid= od.orderId
join products p on od.productid=p.productid
set o.TotalAmount = (od.Quantity*p.price)  ;
select c.firstname,avg(o.totalamount) as Average_order_value from customers c 
join orders o on c.customerid=o.customerid group by c.firstname;

-- 7. Write an SQL query to find the order with the highest total revenue.
-- Include the order ID, customer information, and the total revenue.
select c.firstname,o.totalamount  from customers c 
join orders o on c.customerid=o.customerid
order by o.totalamount desc limit 1;

-- 8. Write an SQL query to list electronic gadgets and the number of times each product has been ordered.
select p.productname,count(od.orderid) as no_0f_product from products p
join orderdetails od using (productid)
group by p.productname ;

-- 9. Write an SQL query to find customers who have purchased a specific electronic gadget product.
-- Allow users to input the product name as a parameter.
set @name="WirelessMouse";
select c.firstname ,p.productname from customers c 
join orders o using(customerid)
join orderdetails od using(orderid)
join products p using (productid) where p.productname=@name;

-- 10. Write an SQL query to calculate the total revenue generated by all orders placed within a specific time period.
-- Allow users to input the start and end dates as parameters.
set @start="2025-04-14";
set @end="2025-06-30";
select sum(totalamount) as total_revenue from orders where orderdate between @start and @end;
select * from orders;


select CustomerId,sum(TotalAmount) as TotalRevenue from orders where orderDate between '2025-01-01' and '2025-12-31' group by CustomerId;

